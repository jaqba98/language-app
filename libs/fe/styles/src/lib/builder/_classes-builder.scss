@use 'styles-builder';
@use '../utils/bem';
@use '../utils/map';

@mixin build-classes($scopes) {
  @include -build-scopes($scopes);
}

@mixin -build-scopes($scopes) {
  $root: map.get-map-element($scopes, 'root', (), false);
  $light-mode: map.get-map-element($scopes, 'light-mode', (), false);
  $dark-mode: map.get-map-element($scopes, 'dark-mode', (), false);

  @include -build-blocks($root);
  @include -build-scope('light-mode', $light-mode);
  @include -build-scope('dark-mode', $dark-mode);
}

@mixin -build-scope($key, $scope) {
  :host-context(.#{$key}) {
    @include -build-blocks($scope);
  }
}

@mixin -build-blocks($blocks) {
  @each $block, $block-values in $blocks {
    $bem-block: bem.build-bem-block($block);
    $styles: map.get-map-element($block-values, 'styles', (), false);
    $elements: map.get-map-element($block-values, 'elements', (), false);
    $modifiers: map.get-map-element($block-values, 'modifiers', (), false);
    $pseudo-classes: map.get-map-element($block-values, 'pseudo-classes', (), false);

    #{$bem-block} {
      @include styles-builder.build-styles($styles);
      @include -build-elements($elements);
      @include -build-modifiers($modifiers);
      @include -build-pseudo-classes($pseudo-classes);
    }
  }
}

@mixin -build-elements($elements) {
  @each $element, $element-values in $elements {
    $bem-element: bem.build-bem-element($element);
    $styles: map.get-map-element($element-values, 'styles', (), false);
    $modifiers: map.get-map-element($element-values, 'modifiers', (), false);
    $pseudo-classes: map.get-map-element($element-values, 'pseudo-classes', (), false);

    &#{$bem-element} {
      @include styles-builder.build-styles($styles);
      @include -build-modifiers($modifiers);
      @include -build-pseudo-classes($pseudo-classes);
    }
  }
}

@mixin -build-modifiers($modifiers) {
  @each $modifier, $modifier-values in $modifiers {
    $bem-modifier: bem.build-bem-modifier($modifier);
    $styles: map.get-map-element($modifier-values, 'styles', (), false);
    $pseudo-classes: map.get-map-element($modifier-values, 'pseudo-classes', (), false);

    &#{$bem-modifier} {
      @include styles-builder.build-styles($styles);
      @include -build-pseudo-classes($pseudo-classes);
    }
  }
}

@mixin -build-pseudo-classes($pseudo-classes) {
  @each $pseudo-class, $styles in $pseudo-classes {
    &:#{$pseudo-class} {
      @include styles-builder.build-styles($styles);
    }
  }
}
